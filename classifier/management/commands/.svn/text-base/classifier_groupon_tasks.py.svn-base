'''
Created on Dec 10, 2010

@author: dannieb
'''
from classifier.groupon import GrouponClassifier
from django.core.management.base import BaseCommand
from optparse import make_option
import sys

class Command(BaseCommand):
    help = ''' Groupon classification tasks'''
    __doc__ = help
    option_list = BaseCommand.option_list + (
        make_option('--load_data', dest='load_data',
                    default=False, help='Loads the new data into the system'),                                  
        make_option('--load_new_tags', dest='load_new_tags',
                    default=False, help='Loads the new tags into the system'),  
        make_option('--count_tags', dest='count_tags',
                    default=False, help='Loads the living social corpa'),   
        make_option('--generate_ccs', dest='generate_ccs',
                    default=False, help='Creates the category yes/nos for the classification system for all the tags'),   
        make_option('--train', dest='train', action='store_true',
                    default=False, help='Trains the classification system'),           
        make_option('--test', dest='test', action='store_true',
                    default=False, help='Tests the classification system against groupon data'), 
        make_option('--export_csv', dest='export_csv', action='store_true',
                    default=False, help='Exports the groupon data to a csv file'),  
        make_option('--gen_obf_ids', dest='gen_obf_ids', action='store_true',
                    default=False, help='Generates the groupon obfuscated ids'),       
        make_option('--get_email_addresses', dest='get_email_addresses',
                    default=False, help='Generates the groupon obfuscated ids'),  
        make_option('--cleanse_emails', dest='cleanse_emails', action='store_true',
                    default=False, help='Cleanses emails'),  
                    
        make_option('--fast_forward', dest='fast_forward',
                    default=True, help='fast forwards'),  
        make_option('--starting_point', dest='starting_point',
                    default=0, help='a starting point within the file'),
        make_option('--ending_point', dest='ending_point',
                    default=sys.maxint, help='an ending point within the file')

    )

    def handle(self, *args, **options):
        grouponClassifier = GrouponClassifier()
        if options['load_data'] :
            grouponClassifier.classify(options['load_data'])
        if options['load_new_tags'] :
            #Loads the new tags into the system
            grouponClassifier.loadNewTags()
            grouponClassifier.linkActualTags()
        if options['count_tags'] :
            grouponClassifier.countTags()
        if options['generate_ccs'] :
            #Creates the category yes/nos for the classification system for all the tags  
            grouponClassifier.generateClassifierCategories()   
        if options['train'] :
            #Trains the system from the groupon data
            grouponClassifier.trainGrouponData(10000)
        if options['test'] :
            grouponClassifier.calculateClassificationAccuracy(30000, 300)
        if options['export_csv'] :
            grouponClassifier.exportCSV("groupon_data_export.csv", separateLocations=False)            
        if options['gen_obf_ids'] :
            grouponClassifier.generateObfIds()
        if options['get_email_addresses'] :
            fastForward = False
            if options.get('fast_forward') == True or options['fast_forward'] == 'True' :
                fastForward = True
            startingPoint = int(options['starting_point'])
            endingPoint = int(options['ending_point'])
            grouponClassifier.getEmailsForWebsites(options['get_email_addresses'], fastForward, startingPoint, endingPoint)
        if options['cleanse_emails'] :
            grouponClassifier.cleanseEmails()
        
            
    
        
        
        
    
        


    
